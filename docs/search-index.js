var searchIndex = JSON.parse('{\
"rust_tracer":{"doc":"Ray tracer. WIP","t":[17,17,17,17,3,17,11,11,12,0,11,11,11,12,11,11,12,0,11,11,5,0,11,0,0,0,11,0,0,12,12,0,11,11,11,12,11,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,13,6,4,13,13,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,6,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,5,5,5,3,12,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,3,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,13,13,4,13,0,11,11,11,11,0,11,11,11,11,11,0,5,11,11,11,11,5,5,5,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,5,0,10,0,0,10,11,11,10,11,0,0,11,11,11,11,11,0,0,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,3,12,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FNAME","FOV","HEIGHT","NUM_SAMPLES","TracerCli","WIDTH","borrow","borrow_mut","boxx","consts","deref","deref_mut","drop","fname","from","from_args","height","image","init","into","main","onb","output_cfg","pdfs","perlin","rand_utils","redact_arg_values","renderer","samplers","samples","threads","tracer","try_from","try_into","type_id","vfov","vzip","width","CHECKER_SCALE","EPSILON","ETA","LOBE_Q","PATH_TRACE_MAX_DEPTH","PATH_TRACE_RR","PERLIN_AMP","PERLIN_FREQ","PERLIN_GAIN","PERLIN_OCTAVES","PERLIN_POINTS","PERLIN_SCALE","SHADOW_RAYS","SPECULAR_COEFF","Image","borrow","borrow_mut","buffer","deref","deref_mut","drop","fname","from","height","init","into","new","rgb","save","try_from","try_into","type_id","vzip","width","Onb","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","to_uvw_basis","try_from","try_into","type_id","u","v","vzip","w","CosPdf","MixedPdf","Pdf","UnitPdf","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","generate_dir","generate_dir","generate_dir","generate_dir","init","init","init","into","into","into","new","new","new","pdf_val","pdf_val","pdf_val","pdf_val","pdfs","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uniform_choose","uvw","vzip","vzip","vzip","Perlin","PermutationXyz","_hash","_hermite_cubic","_scale_turb","_smootherstep","albedo","albedo_at","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","interp","into","into","lattice","new","noise_at","perm","try_from","try_from","try_into","try_into","turbulence","type_id","type_id","vzip","vzip","x","y","z","CosHemisphere","MyRng","RandomShape","Sphere","Square","_get_rng","borrow","borrow_mut","deref","deref_mut","drop","from","gen_2d","gen_3d","init","into","perm_n","rand_f64","rand_vec_dvec3","square_to_cos_hemisphere","square_to_disk","square_to_sphere","try_from","try_into","type_id","vzip","PxSampler","_render","JitteredSampler","UniformSampler","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_iter","into_iter","new","new","next","next","samples","samples","scale","state","state","strata_dim","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bxdfs","camera","hit","integrator","material","object","ray","scene","texture","diffuse_bsdf","glass_bsdf","mirror_bsdf","Camera","blc","borrow","borrow_mut","deref","deref_mut","drop","from","horiz","init","into","new","origin","ray_at","try_from","try_into","type_id","vert","vzip","Hit","borrow","borrow_mut","deref","deref_mut","drop","eq","from","init","into","new","norm","object","p","partial_cmp","t","try_from","try_into","type_id","vzip","BDPathTrace","DirectLight","Integrator","PathTrace","bd_path_trace","borrow","borrow_mut","deref","deref_mut","direct_light","drop","from","init","integrate","into","path_trace","shadow_ray","try_from","try_into","type_id","vzip","integrate","integrate","integrate","Blank","Diffuse","Glass","Light","Material","Mirror","borrow","borrow_mut","brdf","bsdf","deref","deref_mut","drop","emit","from","init","into","is_translucent","try_from","try_into","type_id","vzip","Object","_triangle_to_rect","aabb","area","bvh","cuboid","hit","inside","is_translucent","material","normal_at","plane","rectangle","sample_from","sample_on","sample_towards","sample_towards_pdf","size","sphere","triangle","AxisAlignedBoundingBox","area","ax_max","ax_min","borrow","borrow_mut","deref","deref_mut","drop","from","hit","init","into","material","new","normal_at","try_from","try_into","type_id","vzip","BoundingVolumeHierarchy","borrow","borrow_mut","boxx","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Cuboid","area","borrow","borrow_mut","choose_rectangle","deref","deref_mut","drop","from","from_triangles","hit","init","inside","into","material","material","new","rectangles","sample_on","sample_towards","size","try_from","try_into","type_id","vzip","Plane","area","borrow","borrow_mut","d","deref","deref_mut","drop","from","hit","init","into","material","material","new","norm","normal_at","try_from","try_into","type_id","vzip","Rectangle","area","borrow","borrow_mut","choose_triangle","deref","deref_mut","drop","from","hit","init","into","material","material","new","sample_on","sample_towards","size","triangles","try_from","try_into","type_id","vzip","Sphere","area","borrow","borrow_mut","deref","deref_mut","drop","from","hit","init","inside","into","material","material","new","normal_at","origin","radius","sample_on","sample_towards","sample_towards_pdf","try_from","try_into","type_id","vzip","Triangle","a","area","b","borrow","borrow_mut","c","deref","deref_mut","drop","from","hit","init","into","material","material","new","norm","normal_at","sample_on","sample_towards","try_from","try_into","type_id","vzip","Ray","at","borrow","borrow_mut","deref","deref_mut","dir","drop","from","init","into","new","origin","try_from","try_into","type_id","vzip","LIGHT_R","Scene","borrow","borrow_mut","box_scene","default","deref","deref_mut","drop","from","hit","hit_light","init","into","lights","new","objects","size","try_from","try_into","type_id","uniform_random_light","vzip","Checkerboard","Marble","Solid","Texture","albedo_at","borrow","borrow_mut","checkers_phase","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip"],"q":["rust_tracer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::consts","","","","","","","","","","","","","","rust_tracer::image","","","","","","","","","","","","","","","","","","","","rust_tracer::onb","","","","","","","","","","","","","","","","","","rust_tracer::pdfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::perlin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::rand_utils","","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::renderer","","rust_tracer::samplers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer","","","","","","","","","rust_tracer::tracer::bxdfs","","","rust_tracer::tracer::camera","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::hit","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::integrator","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::integrator::bd_path_trace","rust_tracer::tracer::integrator::direct_light","rust_tracer::tracer::integrator::path_trace","rust_tracer::tracer::material","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::aabb","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::bvh","","","","","","","","","","","","","","rust_tracer::tracer::object::cuboid","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::plane","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::rectangle","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::sphere","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::object::triangle","","","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::ray","","","","","","","","","","","","","","","","","rust_tracer::tracer::scene","","","","","","","","","","","","","","","","","","","","","","","rust_tracer::tracer::texture","","","","","","","","","","","","","","","","",""],"d":["Default output filename","Default vfov","Default render height","Default number of samples per pixel","Just a ray tracer :)","Default render width","","","render box scene?","Various constants used around the crate.","","","","filename for rendered image (defaults to render.png)","Returns the argument unchanged.","","height of the rendered image (defaults to 2160)","Wrapper for writing image buffer to file.","","Calls <code>U::from(self)</code>.","","Utility struct for orthonormal basis.","","Implementation of different probability density functions …","Perlin noise generator.","Wrapper around rand. Provides functions to sample from …","","Main renderer.","Different iterators that stream values sampled from the …","number of random samples per pixel (defaults to 1)","number of threads used (defaults to all)","The heart.","","","","vertical field-of-view in degrees (defaults to 90)","","width of the rendered image (defaults to 3840)","Base scale for the size of checker boxes. bigger = smaller …","Epsilon to avoid self intersection of objects","Refraction constant of glass","specular lobe coefficient. smaller = bigger lobe UNUSED","Maximum recursion depth of path tracing. UNUSED, russian …","Russian roulette probability for the path tracer. …","Amplitude of the noise pattern in perlin noise","Frequency of noise in perlin noise. bigger = more frequent","Scale of each term in turbulence. should be less than 1.0","Recursion depth in perlin turbulence","Number of points in the perlin noise lattice","Scale of points in perlin. bigger = more noticeable effect","number of shadow rays per intersection point. UNUSED","Intensity of the specular lobe UNUSED","Contains the necessary data to write buffer to file.","","","Image buffer storing RGB-channels in range [0,1].","","","","Filename of the output file.","Returns the argument unchanged.","Height of rendered image.","","Calls <code>U::from(self)</code>.","","Translates the image buffer of RGB values in range [0,1] …","Creates the PNG file","","","","","Width of rendered image.","Small utility struct for orthonormal basis","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new ONB.","Translate from canonical basis to our ONB.","","","","<code>x</code> (or <code>y</code>?) direction","<code>y</code> (or <code>x</code>?) direction","","<code>z</code> direction","Cosine weighed samples on hemisphere pointing towards <code>z</code> of …","Combination of multiple PDFs. Chooses one uniformly at …","","Unit PDF with delta distribution. Glass might want own PDF?","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates a random direction according to the sampling …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Arguments","","","Computes the probability of the given direction","","","","Vector of the PDFs to choose from","","","","","","","","","","","","","","","Instance of Perlin noise generator.","Helper struct to store permutation vectors for each …","Hash utility function to get normals in the lattice","Smoothing for weights","","Smoothing for weights","a.k.a the underlying colour","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Trilinear interpolation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Random normals of the Perlin lattice","","","Permutation directions","","","","","","","","","","","","","","","Enum to generate different random unit geometrical objects …","","","","","","","","","Returns the argument unchanged.","Generator function for 2D objects","Generator function for 3D objects","","Calls <code>U::from(self)</code>.","Random permutation of 0..n","Random f64","return <code>n</code> normalized random DVec3s in a vector","Cosine weighed random point ON hemisphere pointing towards …","Concentric map of unit square to unit disk. Shirley &amp; Chiu …","Uniform random point IN unit sphere","","","","","","","Divide unit square to <code>n</code>x<code>n</code> strata and provide one sample …","Choose each sample point uniformly at random","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","How many samples was asked?","How many samples have been asked for? Should be a square, …","Width of one strata","How many samples have been given?","How many samples have been given?","How many strata per dimension?","","","","","","","","","Different BSDFs.","Abstraction for a camera","Abstraction for a hit between a ray and an object.","Integrator to estimate the irradiance at each point","Material of an object that defines how it behaves with rays","Abstractions for objects in the 3D world","Abstractions for rays.","Scene that describes the 3D world to render.","Textures that can be given to some materials","Scattering function for diffuse material.","Scattering function for glass material. Refracts according …","Scattering function for mirror material. Perfect …","Abstraction for a camera","Bottom left corner of the image plane","","","","","","Returns the argument unchanged.","Vector pointing from BLC to the ULC","","Calls <code>U::from(self)</code>.","Returns a camera","Origin of the camera","Returns a ray pointing towards a point on the image plane.","","","","Vector pointing from BLC to BRC","","Stores information about a hit between a ray and an object.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Arguments","Normal of the object at the point of impact.","The object which got hit","3D point where object was hit","","The <code>t</code> value of ray at which the hit occurred.","","","","","","","Enum to choose which integrator to use","","bidirectional path tracing","","","","","Naive integrator that importance samples light once.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Implements the path tracing algorithm with Russian …","Shoots a shadow ray towards random light from <code>ho</code>.","","","","","","","","Not specified. Used with objects that are built on top of …","“Normal material”","Refracts light","Emits light","Describes which material an object is made out of","Perfect mirror","","","What is the color at p?","How does <code>r</code> get scattered at <code>h</code>?","","","","How much light emitted at <code>h</code>?","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Does light pass through the material?","","","","","Common functionality shared between all objects.","Given a triangle, with points read from the columns of the …","Axis aligned bounding boxes","Surface area of the object","Bounding volume hierarchy","Defines cuboids. Built from six rectangles.","Does the ray hit the object?","Is the ray inside the object?","","","Normal of the object at the point <code>p</code>. Does not check if <code>p</code> is","Defines infinite planes","Defines rectangles. Built from two triangles.","Sample random ray leaving the object. Random unit square …","Sample random point on the surface of the object","Sample random ray from <code>ho.p = xo</code> towards area of object …","PDF for sampling points on the surface that are visible …","Number of objects the object consists of.","Defines spheres.","Defines triangles.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Choose a rectangle uniformly at random","","","","Returns the argument unchanged.","Helper function to construct cuboids from affine …","","","","Calls <code>U::from(self)</code>.","","","Constructs a cuboid by applying an affine transformation …","","","","","","","","","Plane defined by a single point and a normal","","","","<code>p.dot(-norm)</code>, used for fast hit calculations","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Unidirectional normal","","","","","","","","","","Choose either of the triangles uniformly at random","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Constructs a rectangle from three points. Fourth point, …","","","","","","","","","Sphere specified by its radius and origin","","","","","","","Returns the argument unchanged.","Solve the quadratic","","If distance to origin smaller than radius, must be inside","Calls <code>U::from(self)</code>.","","","Arguments","Points way from origin","","","Sample on unit sphere and scale","Visible area from <code>ho.p = xo</code> forms a cone. Sample a random …","","","","","","Triangle specified by three points","","With cross product","","","","","","","","Returns the argument unchanged.","Barycentric triangle intersection with Cramer’s rule","","Calls <code>U::from(self)</code>.","","","Constructs triangle from three points and specifies normal …","Unidirectional normal","","Random point with barycentrics.","Choose random point on surface of triangle. Shoot ray …","","","","","Ray abstraction","","","","","","Direction of the ray. Not neccesarily normalized.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Point of origin of the ray","","","","","","Defines a scene in 3D space","","","“Cornell Box”","Scene showing capabilities of the renderer :)","","","","Returns the argument unchanged.","Returns the closest object <code>r</code> hits and <code>None</code> if no hits","Does ray <code>r</code> reach the light object <code>light</code>? TODO: rewrite","","Calls <code>U::from(self)</code>.","Contains indices to all of the lights in <code>objects</code>","","All of the objects in the scene.","Number of objects in the scene. Might want to print x of …","","","","Choose one of the lights uniformly at random.","","Checkerboard of textures. Float defines scale, bigger …","Marble like texture generated from Perlin noise.","Solid colour.","Defines a texture to choose a colour of material at each …","Colour at point <code>p</code>, should transform to texture coords of …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,2,2,2,0,2,2,2,2,2,2,2,0,2,2,0,0,2,0,0,0,2,0,0,2,2,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,16,13,14,15,13,14,15,13,14,15,13,14,15,16,13,14,15,14,13,14,15,13,14,15,13,14,15,14,13,13,14,15,0,0,20,20,20,20,20,20,43,20,43,20,43,20,43,20,43,20,43,20,43,20,20,43,20,20,20,20,20,43,20,43,20,20,43,20,43,20,43,43,43,22,0,0,22,22,0,22,22,22,22,22,22,22,22,22,22,0,0,0,22,22,22,22,22,22,22,0,0,0,0,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,26,25,26,26,25,26,25,26,25,26,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,32,32,0,32,0,32,32,32,32,0,32,32,32,32,32,0,0,32,32,32,32,0,0,0,33,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,30,0,0,30,30,30,30,30,0,0,30,30,30,30,30,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,44,44,44,44,44,44,44,44,44,44,44,44,44,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"f":[0,0,0,0,0,0,[[]],[[]],0,0,[1],[1],[1],0,[[]],[[],[[4,[2,3]]]],0,0,[[],1],[[]],[[]],0,[2],0,0,0,[[],[[4,[[6,[5]],3]]]],0,0,0,0,0,[[],4],[[],4],[[],7],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[1],[1],[1],0,[[]],0,[[],1],[[]],[[[6,[8]],1,1,5],9],[9,[[6,[10]]]],[9],[[],4],[[],4],[[],7],[[]],0,0,[[]],[[]],[1],[1],[1],[[]],[[],1],[[]],[8,11],[[11,8],8],[[],4],[[],4],[[],7],0,0,[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[12,8],[[13,12],8],[[14,12],8],[[15,12],8],[[],1],[[],1],[[],1],[[]],[[]],[[]],[8,13],[[[6,[[17,[16]]]]],14],[[],15],[[8,18],19],[[13,8,18],19],[[14,8,18],19],[[15,8,18],19],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],7],[[],7],[[],7],[14,17],0,[[]],[[]],[[]],0,0,[[20,1,1,1],1],[[20,8],8],[[20,19,19],19],[[20,8],8],0,[[20,8],8],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[]],[[]],[[],1],[[],1],[[20,[6,[8]],8],19],[[]],[[]],0,[8,20],[[20,8],19],0,[[],4],[[],4],[[],4],[[],4],[[20,19,8,1],19],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,[[],21],[[]],[[]],[1],[1],[1],[[]],[22,12],[22,8],[[],1],[[]],[1,[[6,[1]]]],[[],19],[1,[[6,[8]]]],[12,8],[12,12],[12,8],[[],4],[[],4],[[],7],[[]],0,[[1,19,1,19,1,23,24],[[6,[8]]]],0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[]],[1,25],[1,26],[25,27],[26,27],0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,[[18,28,12],27],[[18,28],27],[[18,28],27],0,0,[[]],[[]],[1],[1],[1],[[]],0,[[],1],[[]],[[19,19,8,8,8,19],23],0,[[23,19,19],28],[[],4],[[],4],[[],7],0,[[]],0,[[]],[[]],[1],[1],[1],[[18,18],29],[[]],[[],1],[[]],[[19,30,28],[[27,[18]]]],0,0,0,[[18,18],[[27,[31]]]],0,[[],4],[[],4],[[],7],[[]],0,0,0,0,0,[[]],[[]],[1],[1],0,[1],[[]],[[],1],[[32,24,28],8],[[]],0,[[24,18,12],8],[[],4],[[],4],[[],7],[[]],[[24,28],8],[[24,28],8],[[24,28,1,29],8],0,0,0,0,0,0,[[]],[[]],[[33,8],8],[[33,18,28,12],27],[1],[1],[1],[[33,18],8],[[]],[[],1],[[]],[33,29],[[],4],[[],4],[[],7],[[]],0,[34,8],0,[[],19],0,0,[28,[[27,[18]]]],[28,29],[[],29],[[],33],[8,8],0,0,[[12,12],28],[12,8],[[18,12]],[[8,8,8,8],19],[[],1],0,0,0,[35,19],0,0,[[]],[[]],[1],[1],[1],[[]],[[35,28],[[27,[18]]]],[[],1],[[]],[35,33],[30,35],[[35,8],8],[[],4],[[],4],[[],7],[[]],0,[[]],[[]],0,[1],[1],[1],[[]],[[],1],[[]],[[],4],[[],4],[[],7],[[]],0,[36,19],[[]],[[]],[36,37],[1],[1],[1],[[]],[[34,34,8,33],[[17,[36]]]],[[36,28],[[27,[18]]]],[[],1],[[36,28],29],[[]],[36,33],0,[[38,33],[[17,[36]]]],0,[[36,12],8],[[36,18,12]],[36,1],[[],4],[[],4],[[],7],[[]],0,[39,19],[[]],[[]],0,[1],[1],[1],[[]],[[39,28],[[27,[18]]]],[[],1],[[]],[39,33],0,[[8,8,33],[[17,[39]]]],0,[[39,8],8],[[],4],[[],4],[[],7],[[]],0,[37,19],[[]],[[]],[37,40],[1],[1],[1],[[]],[[37,28],[[27,[18]]]],[[],1],[[]],[37,33],0,[[34,8,33],[[17,[37]]]],[[37,12],8],[[37,18,12]],[37,1],0,[[],4],[[],4],[[],7],[[]],0,[41,19],[[]],[[]],[1],[1],[1],[[]],[[41,28],[[27,[18]]]],[[],1],[[41,28],29],[[]],[41,33],0,[[8,19,33],[[17,[41]]]],[[41,8],8],0,0,[[41,12],8],[[41,18,12]],[[41,8,8,8,8],19],[[],4],[[],4],[[],7],[[]],0,0,[40,19],0,[[]],[[]],0,[1],[1],[1],[[]],[[40,28],[[27,[18]]]],[[],1],[[]],[40,33],0,[[8,8,8,8,33],[[17,[40]]]],0,[[40,8],8],[[40,12],8],[[40,18,12]],[[],4],[[],4],[[],7],[[]],0,[[28,19],8],[[]],[[]],[1],[1],0,[1],[[]],[[],1],[[]],[[8,8],28],0,[[],4],[[],4],[[],7],[[]],0,0,[[]],[[]],[19,24],[[],24],[1],[1],[1],[[]],[[24,28],[[27,[18]]]],[[24,28,17],[[27,[18]]]],[[],1],[[]],0,[[[6,[[17,[30]]]]],24],0,[24,1],[[],4],[[],4],[[],7],[24,17],[[]],0,0,0,0,[[42,8],8],[[]],[[]],[[42,8],19],[1],[1],[1],[[]],[[],1],[[]],[[],4],[[],4],[[],7],[[]]],"p":[[15,"usize"],[3,"TracerCli"],[3,"EarlyExit"],[4,"Result"],[3,"String"],[3,"Vec"],[3,"TypeId"],[3,"DVec3"],[3,"Image"],[15,"u8"],[3,"Onb"],[3,"DVec2"],[3,"CosPdf"],[3,"MixedPdf"],[3,"UnitPdf"],[8,"Pdf"],[3,"Box"],[3,"Hit"],[15,"f64"],[3,"Perlin"],[3,"ThreadRng"],[4,"RandomShape"],[3,"Camera"],[3,"Scene"],[3,"UniformSampler"],[3,"JitteredSampler"],[4,"Option"],[3,"Ray"],[15,"bool"],[8,"Object"],[4,"Ordering"],[4,"Integrator"],[4,"Material"],[3,"DMat3"],[3,"AxisAlignedBoundingBox"],[3,"Cuboid"],[3,"Rectangle"],[3,"DAffine3"],[3,"Plane"],[3,"Triangle"],[3,"Sphere"],[4,"Texture"],[3,"PermutationXyz"],[3,"BoundingVolumeHierarchy"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
