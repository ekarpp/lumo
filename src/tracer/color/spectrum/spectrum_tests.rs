#![allow(clippy::excessive_precision)]
use super::*;

const TEST_POINTS: usize = 32;

fn pass(spec: Spectrum, ans: [TexFloat; 3]) -> bool {
    let cs = [spec.c0, spec.c1, spec.c2];

    let ok = (0..3)
        .all(|i| {
            let diff = (cs[i] - ans[i]).abs();
            print!("{}", diff);
            diff < crate::EPSILON.powf(1.0 / 3.0) as TexFloat
        });
    println!();
    ok
}

#[test]
fn probably_correct() {
    for i in 0..TEST_POINTS {
        let rgb = TEST_DATA[2*i + 0];
        let ans = TEST_DATA[2*i + 1];
        let spec = Spectrum::_from_rgb(rgb[0] as Float, rgb[1] as Float, rgb[2] as Float);

        assert!(pass(spec, ans));
    }
}

#[test]
fn black_correct() {
    let b = Spectrum::from_srgb(0, 0, 0);
    assert!(b.is_black());
}

#[test]
fn white_correct() {
    let rgb = [1.000000, 1.000000, 1.000000];
    let ans = [0.001685, -2.276728, 807.041931];

    let spec = Spectrum::_from_rgb(rgb[0], rgb[1], rgb[2]);
    assert!(pass(spec, ans));
}


const TEST_DATA: [[TexFloat; 3]; 2 * TEST_POINTS] = [
    [0.840188, 0.394383, 0.783099],
    [0.000130, -0.138733, 36.857048],
    [0.798440, 0.911647, 0.197551],
    [-0.000146, 0.166762, -46.203735],
    [0.335223, 0.768230, 0.277775],
    [-0.000131, 0.141731, -37.736938],
    [0.553970, 0.477397, 0.628871],
    [0.000027, -0.030092, 8.273584],
    [0.364784, 0.513401, 0.952230],
    [0.000088, -0.104425, 30.711172],
    [0.916195, 0.635712, 0.717297],
    [0.000071, -0.072164, 18.686850],
    [0.141603, 0.606969, 0.016301],
    [-0.000287, 0.314050, -85.621674],
    [0.242887, 0.137232, 0.804177],
    [0.000125, -0.142872, 39.648857],
    [0.156679, 0.400944, 0.129790],
    [-0.000107, 0.115745, -31.522655],
    [0.108809, 0.998924, 0.218257],
    [-0.000423, 0.451485, -118.652237],
    [0.512932, 0.839112, 0.612640],
    [-0.000087, 0.091769, -23.496223],
    [0.296032, 0.637552, 0.524287],
    [-0.000057, 0.059231, -14.971228],
    [0.493583, 0.972775, 0.292517],
    [-0.000233, 0.253175, -67.393456],
    [0.771358, 0.526745, 0.769914],
    [0.000074, -0.079453, 21.429508],
    [0.400229, 0.891529, 0.283315],
    [-0.000180, 0.195130, -51.891693],
    [0.352458, 0.807725, 0.919026],
    [-0.000034, 0.027941, -4.244676],
    [0.069755, 0.949327, 0.525995],
    [-0.000289, 0.301503, -77.012283],
    [0.086056, 0.192214, 0.663227],
    [0.000032, -0.043074, 13.177736],
    [0.890233, 0.348893, 0.064171],
    [0.000009, 0.002244, -4.194149],
    [0.020023, 0.457702, 0.063096],
    [-0.000239, 0.256953, -68.934509],
    [0.238280, 0.970634, 0.902208],
    [-0.000243, 0.245708, -59.900734],
    [0.850920, 0.266666, 0.539760],
    [0.000124, -0.128879, 32.998337],
    [0.375207, 0.760249, 0.512535],
    [-0.000085, 0.089515, -23.068096],
    [0.667724, 0.531606, 0.039280],
    [-0.000102, 0.119507, -34.868950],
    [0.437638, 0.931835, 0.930810],
    [-0.000113, 0.110783, -25.403563],
    [0.720952, 0.284293, 0.738534],
    [0.000126, -0.135929, 36.174660],
    [0.639979, 0.354049, 0.687861],
    [0.000080, -0.086303, 23.083019],
    [0.165974, 0.440105, 0.880075],
    [0.000036, -0.047660, 15.142700],
    [0.829201, 0.330337, 0.228968],
    [0.000056, -0.052836, 11.885515],
    [0.893372, 0.350360, 0.686670],
    [0.000132, -0.139003, 36.200203],
    [0.956468, 0.588640, 0.657304],
    [0.000084, -0.085353, 21.683817],
    [0.858676, 0.439560, 0.923970],
    [0.000194, -0.211344, 57.26374]
];
